library(shiny); runApp('Assignment3.R')
runApp('Assignment3.R')
runApp('Assignment3.R')
# 필요한 라이브러리 로드
library(shiny)
library(shinythemes)
library(fontawesome)
library(shinyWidgets)
library(highcharter)
library(bslib)
library(dplyr)
library(readr)
library(jsonlite)
library(leaflet)
library(geojsonio)
library(sf)
# 트램 및 기차역 데이터 로드
tram_data <- read_csv("tram_stop.csv")
setwd("/Users/subinseol/Documents/GitHub/GOEM90007-A3/data")
# 트램 및 기차역 데이터 로드
tram_data <- read_csv("tram_stop.csv")
train_data <- read_csv("train_station.csv")
runApp('~/Documents/GitHub/GOEM90007-A3/Assignment3.R')
# GeoJSON 파일 로드 (멜버른 구역)
melbourne_geojson <- st_read("melbourne_city.geojson")
# 선택 필터 값 정의
state_choiceVec <- c("All Stops", "Tram Stops", "Train Stations")
##################
# USER INTERFACE #
##################
ui <- page_navbar(
title = "Melbourne Tram and Train Stations",
theme = bs_theme(
bootswatch = "cerulean",
navbar_bg = "#d3d3d3"
),
nav_spacer(),
# 1st tab - Overview of Stops
nav_panel("Overview",
fluidPage(
# Title을 actionLink와 결합하여 클릭 가능하게 함
actionLink("tram_title",
value_box(
title = "Overview of Melbourne Tram and Train Stations",
value = "",
theme = "bg-gradient-cyan-green",
showcase = bsicons::bs_icon("map"),
showcase_layout = "top right"
)),
hr(),
h5(strong("Select Stop Type, Map View, and Zoom to explore stations on the map."),
style = "font-size:16px;"),
# Value box
layout_columns(
actionLink("tram_link",
value_box(
title = "Total Tram Stops",
value = nrow(tram_data),
theme = "bg-gradient-cyan-green",
showcase = bsicons::bs_icon("train-lightrail-front"),
showcase_layout = "top right"
)),
actionLink("train_link",
value_box(
title = "Total Train Stations",
value = nrow(train_data),
theme = "bg-gradient-teal-blue",
showcase = bsicons::bs_icon("train-front"),
showcase_layout = "top right"
))
),
hr(),
# 필터 옵션 및 지도 시각화
sidebarLayout(
sidebarPanel(
# 라디오 버튼으로 변경
radioButtons("stop_type",
label = tags$p(fa("filter", fill = "#244f76"),
"Select Stop Type"),
choices = list("All Stops" = "All Stops",
"Tram Stops" = "Tram Stops",
"Train Stations" = "Train Stations"),
selected = "All Stops"),
sliderInput("zoom_level", "Zoom Level:",
min = 10, max = 16, value = 12, step = 1)
),
mainPanel(
leafletOutput("station_map", height = "600px")
)
),
hr(),
h5('Data Source: Melbourne Public Transport',
style = "font-size:12px;")
)
),
# 2nd tab - Detailed View of Stops
nav_panel("Details",
fluidPage(
actionLink("details_title",
value_box(
title = "Details of Tram and Train Stations",
value = "",
theme = "bg-gradient-teal-blue",
showcase = bsicons::bs_icon("info-circle"),
showcase_layout = "top right"
)),
hr(),
h5(strong("Select a station marker for detailed information."),
style = "font-size:16px;"),
# Sidebar 및 지도 시각화
sidebarLayout(
sidebarPanel(
# 라디오 버튼으로 변경
radioButtons("detailed_stop_type",
label = tags$p(fa("filter", fill = "#e37400"),
"Select Stop Type"),
choices = list("All Stops" = "All Stops",
"Tram Stops" = "Tram Stops",
"Train Stations" = "Train Stations"),
selected = "All Stops")
),
mainPanel(
highchartOutput("station_details_chart", height = "600px")
)
),
hr(),
h5('Data Source: Melbourne Public Transport',
style = "font-size:12px;")
)
)
)
################
# SHINY SERVER #
################
server <- shinyServer(function(input, output, session) {
########################
# Overview Tab - Map #
########################
output$station_map <- renderLeaflet({
# 선택한 정류장 타입에 따른 필터링
filtered_data <- switch(input$stop_type,
"Tram Stops" = tram_data %>%
select(stop_id, latitude, longitude, stop_name, ticketzone, routeussp),
"Train Stations" = train_data %>%
mutate(stop_id = NA, stop_name = station, ticketzone = NA, routeussp = NA) %>%
select(stop_id, latitude, longitude, stop_name, ticketzone, routeussp),
"All Stops" = rbind(
tram_data %>%
select(stop_id, latitude, longitude, stop_name, ticketzone, routeussp),
train_data %>%
mutate(stop_id = NA, stop_name = station, ticketzone = NA, routeussp = NA) %>%
select(stop_id, latitude, longitude, stop_name, ticketzone, routeussp)
)
)
# 멜버른 구역을 지도에 추가 및 트램, 기차역 마커 표시
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
setView(lng = 144.9631, lat = -37.8136, zoom = input$zoom_level) %>%
addCircles(
data = filtered_data,
lat = ~latitude, lng = ~longitude,
popup = ~paste("Stop Name: ", stop_name),
color = ~ifelse(input$stop_type == "Tram Stops", "red", "blue"),
radius = 50
)
})
###############################
# Details Tab - Highchart Chart #
###############################
output$station_details_chart <- renderHighchart({
# 선택된 정류장 타입에 따라 데이터 필터링
filtered_data <- switch(input$detailed_stop_type,
"Tram Stops" = tram_data,
"Train Stations" = train_data,
"All Stops" = rbind(tram_data, train_data))
# 역별 데이터 시각화
highchart() %>%
hc_chart(type = "bar") %>%
hc_title(text = paste("Number of Stops for", input$detailed_stop_type)) %>%
hc_xAxis(categories = filtered_data$stop_name) %>%
hc_add_series(name = "Stops", data = nrow(filtered_data), color = "#3498DB") %>%
hc_plotOptions(bar = list(
dataLabels = list(enabled = TRUE)
)) %>%
hc_legend(enabled = FALSE)
})
##########################
# Observe link click events
##########################
observeEvent(input$tram_link, {
updateRadioButtons(session, "stop_type", selected = "Tram Stops")
})
observeEvent(input$train_link, {
updateRadioButtons(session, "stop_type", selected = "Train Stations")
})
# 'Overview of Melbourne Tram and Train Stations' 클릭 시 All Stops로 변경
observeEvent(input$tram_title, {
updateRadioButtons(session, "stop_type", selected = "All Stops")
})
observeEvent(input$details_title, {
updateRadioButtons(session, "detailed_stop_type", selected = "All Stops")
})
})
shinyApp(ui, server)
